from netmiko import ConnectHandler
import re
import plotly.graph_objects as go
import networkx as nx

# Router credentials
router = {
    "device_type": "cisco_ios",
    "host": "192.168.1.1",  # Replace with your router IP
    "username": "cisco",
    "password": "cisco",
}

try:
    # Establish SSH connection
    net_connect = ConnectHandler(**router)

    # Fetch OSPF neighbor details
    output = net_connect.send_command("show ip ospf neighbor")
    hostname = net_connect.find_prompt()[:-1]

    # Close connection
    net_connect.disconnect()

    # Parse OSPF neighbor details
    neighbors = []

    for line in output.split("\n"):
        match = re.search(r"(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s+.*?\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s+(.+)", line)
        if match:
            neighbor_id, neighbor_ip, interface = match.groups()
            neighbors.append((neighbor_id, neighbor_ip, interface.strip()))

    # Create a NetworkX graph
    G = nx.Graph()
    G.add_node(hostname)

    for neighbor_id, neighbor_ip, interface in neighbors:
        G.add_node(neighbor_id)
        G.add_edge(hostname, neighbor_id, label=f"{interface}\n{neighbor_ip}")

    # Get node positions for layout
    pos = nx.spring_layout(G, k=1, iterations=50)

    # Create edge traces
    edge_x = []
    edge_y = []
    edge_text = []

    for edge in G.edges():
        x0, y0 = pos[edge[0]]
        x1, y1 = pos[edge[1]]
        edge_x.extend([x0, x1, None])
        edge_y.extend([y0, y1, None])
        edge_text.append(G.edges[edge]['label'])

    edge_trace = go.Scatter(
        x=edge_x, y=edge_y,
        line=dict(width=1, color='#888'),
        hoverinfo='text',
        mode='lines')

    # Create node traces
    node_x = []
    node_y = []
    node_text = []

    for node in G.nodes():
        x, y = pos[node]
        node_x.append(x)
        node_y.append(y)
        node_text.append(node)

    node_trace = go.Scatter(
        x=node_x, y=node_y,
        mode='markers+text',  # Corrected mode
        hoverinfo='text',
        marker=dict(
            showscale=False,
            color='lightblue',
            size=30,
            line=dict(width=0.01)),
        text=node_text,  # Use node_text for labels
        textposition="bottom center"
    )

    edge_trace.text = edge_text

    # Create figure
    fig = go.Figure(data=[edge_trace, node_trace],
                 layout=go.Layout(
                    title=dict(text='OSPF Neighbor Topology', font=dict(size=32)),
                    showlegend=False,
                    hovermode='closest',
                    margin=dict(b=20, l=5, r=5, t=40),
                    annotations=[dict(
                        showarrow=False,
                        xref="paper", yref="paper",
                        x=0.005, y=-0.002)],
                    xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                    yaxis=dict(showgrid=False, zeroline=False, showticklabels=False))
                    )
    fig.show()

except Exception as e:
    print(f"An error occurred: {e}")
